// Code generated by jtd-codegen for Go v0.2.1. DO NOT EDIT.

package foo_service_jtd

import (
	"encoding/json"
	"fmt"
)

type FooService struct {
	MethodName string

	Method1 FooServiceMethod1
}

func (v FooService) MarshalJSON() ([]byte, error) {
	switch v.MethodName {
	case "Method1":
		return json.Marshal(struct { T string `json:"method_name"`; FooServiceMethod1 }{ v.MethodName, v.Method1 })
	}

	return nil, fmt.Errorf("bad MethodName value: %s", v.MethodName)
}

func (v *FooService) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"method_name"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "Method1":
		err = json.Unmarshal(b, &v.Method1)
	default:
		err = fmt.Errorf("bad MethodName value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.MethodName = t.T
	return nil
}

type FooServiceMethod1Request struct {
	AnotherParam float64 `json:"another_param"`

	SomeParam string `json:"some_param"`
}

type FooServiceMethod1ResponseDataPoint struct {
	ID string `json:"id"`

	Value float64 `json:"value"`
}

type FooServiceMethod1Response struct {
	BiggerUnsignedIntegerMetadata string `json:"bigger_unsigned_integer_metadata"`

	DataPoints []FooServiceMethod1ResponseDataPoint `json:"data_points"`

	FractionalScore float64 `json:"fractional_score"`

	Information string `json:"information"`

	SmallIntegerMetadata int32 `json:"small_integer_metadata"`

	UnsignedSmallIntMetadata uint32 `json:"unsigned_small_int_metadata"`
}

type FooServiceMethod1 struct {
	Request FooServiceMethod1Request `json:"request"`

	Response FooServiceMethod1Response `json:"response"`
}
