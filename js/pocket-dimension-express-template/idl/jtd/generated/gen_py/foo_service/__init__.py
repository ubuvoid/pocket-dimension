# Code generated by jtd-codegen for Python v0.3.1

import re
from dataclasses import dataclass
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, List, Optional, Type, Union, get_args, get_origin


@dataclass
class FooService:
    method_name: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FooService':
        variants: Dict[str, Type[FooService]] = {
            "Method1": FooServiceMethod1,
        }

        return variants[data["method_name"]].from_json_data(data)

    def to_json_data(self) -> Any:
        pass

@dataclass
class FooServiceMethod1Request:
    another_param: 'float'
    some_param: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FooServiceMethod1Request':
        return cls(
            _from_json_data(float, data.get("another_param")),
            _from_json_data(str, data.get("some_param")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["another_param"] = _to_json_data(self.another_param)
        data["some_param"] = _to_json_data(self.some_param)
        return data

@dataclass
class FooServiceMethod1ResponseDataPoint:
    id: 'str'
    value: 'float'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FooServiceMethod1ResponseDataPoint':
        return cls(
            _from_json_data(str, data.get("id")),
            _from_json_data(float, data.get("value")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["id"] = _to_json_data(self.id)
        data["value"] = _to_json_data(self.value)
        return data

@dataclass
class FooServiceMethod1Response:
    bigger_unsigned_integer_metadata: 'str'
    data_points: 'List[FooServiceMethod1ResponseDataPoint]'
    fractional_score: 'float'
    information: 'str'
    small_integer_metadata: 'int'
    unsigned_small_int_metadata: 'int'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FooServiceMethod1Response':
        return cls(
            _from_json_data(str, data.get("bigger_unsigned_integer_metadata")),
            _from_json_data(List[FooServiceMethod1ResponseDataPoint], data.get("data_points")),
            _from_json_data(float, data.get("fractional_score")),
            _from_json_data(str, data.get("information")),
            _from_json_data(int, data.get("small_integer_metadata")),
            _from_json_data(int, data.get("unsigned_small_int_metadata")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["bigger_unsigned_integer_metadata"] = _to_json_data(self.bigger_unsigned_integer_metadata)
        data["data_points"] = _to_json_data(self.data_points)
        data["fractional_score"] = _to_json_data(self.fractional_score)
        data["information"] = _to_json_data(self.information)
        data["small_integer_metadata"] = _to_json_data(self.small_integer_metadata)
        data["unsigned_small_int_metadata"] = _to_json_data(self.unsigned_small_int_metadata)
        return data

@dataclass
class FooServiceMethod1(FooService):
    request: 'FooServiceMethod1Request'
    response: 'FooServiceMethod1Response'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FooServiceMethod1':
        return cls(
            "Method1",
            _from_json_data(FooServiceMethod1Request, data.get("request")),
            _from_json_data(FooServiceMethod1Response, data.get("response")),
        )

    def to_json_data(self) -> Any:
        data = { "method_name": "Method1" }
        data["request"] = _to_json_data(self.request)
        data["response"] = _to_json_data(self.response)
        return data

def _from_json_data(cls: Any, data: Any) -> Any:
    if data is None or cls in [bool, int, float, str, object] or cls is Any:
        return data
    if cls is datetime:
        return _parse_rfc3339(data)
    if get_origin(cls) is Union:
        return _from_json_data(get_args(cls)[0], data)
    if get_origin(cls) is list:
        return [_from_json_data(get_args(cls)[0], d) for d in data]
    if get_origin(cls) is dict:
        return { k: _from_json_data(get_args(cls)[1], v) for k, v in data.items() }
    return cls.from_json_data(data)

def _to_json_data(data: Any) -> Any:
    if data is None or type(data) in [bool, int, float, str, object]:
        return data
    if type(data) is datetime:
        return data.isoformat()
    if type(data) is list:
        return [_to_json_data(d) for d in data]
    if type(data) is dict:
        return { k: _to_json_data(v) for k, v in data.items() }
    return data.to_json_data()

def _parse_rfc3339(s: str) -> datetime:
    datetime_re = '^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(\.\d+)?([zZ]|((\+|-)(\d{2}):(\d{2})))$'
    match = re.match(datetime_re, s)
    if not match:
        raise ValueError('Invalid RFC3339 date/time', s)

    (year, month, day, hour, minute, second, frac_seconds, offset,
     *tz) = match.groups()

    frac_seconds_parsed = None
    if frac_seconds:
        frac_seconds_parsed = int(float(frac_seconds) * 1_000_000)
    else:
        frac_seconds_parsed = 0

    tzinfo = None
    if offset == 'Z':
        tzinfo = timezone.utc
    else:
        hours = int(tz[2])
        minutes = int(tz[3])
        sign = 1 if tz[1] == '+' else -1

        if minutes not in range(60):
            raise ValueError('minute offset must be in 0..59')

        tzinfo = timezone(timedelta(minutes=sign * (60 * hours + minutes)))

    second_parsed = int(second)
    if second_parsed == 60:
        second_parsed = 59

    return datetime(int(year), int(month), int(day), int(hour), int(minute),
                    second_parsed, frac_seconds_parsed, tzinfo)            
