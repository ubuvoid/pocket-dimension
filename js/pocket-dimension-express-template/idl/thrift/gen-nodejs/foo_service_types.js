//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
if (typeof pocketdimension === 'undefined') {
  pocketdimension = {};
}
if (typeof pocketdimension.example === 'undefined') {
  pocketdimension.example = {};
}
if (typeof pocketdimension.example.foo === 'undefined') {
  pocketdimension.example.foo = {};
}
var pocketdimension.example.foo.Method1Request = module.exports.pocketdimension.example.foo.Method1Request = function(args) {
  this.some_param = null;
  this.another_param = null;
  if (args) {
    if (args.some_param !== undefined) {
      this.some_param = args.some_param;
    }
    if (args.another_param !== undefined) {
      this.another_param = args.another_param;
    }
  }
};
pocketdimension.example.foo.Method1Request.prototype = {};
pocketdimension.example.foo.Method1Request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.some_param = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.another_param = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pocketdimension.example.foo.Method1Request.prototype.write = function(output) {
  output.writeStructBegin('Method1Request');
  if (this.some_param) {
    output.writeFieldBegin('some_param', Thrift.Type.STRING, 1);
    output.writeString(this.some_param);
    output.writeFieldEnd();
  }
  if (this.another_param) {
    output.writeFieldBegin('another_param', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.another_param);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var pocketdimension.example.foo.Method1Response_InnerData = module.exports.pocketdimension.example.foo.Method1Response_InnerData = function(args) {
  this.id = null;
  this.value = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
pocketdimension.example.foo.Method1Response_InnerData.prototype = {};
pocketdimension.example.foo.Method1Response_InnerData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pocketdimension.example.foo.Method1Response_InnerData.prototype.write = function(output) {
  output.writeStructBegin('Method1Response_InnerData');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.value) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var pocketdimension.example.foo.Method1Response = module.exports.pocketdimension.example.foo.Method1Response = function(args) {
  this.information = null;
  this.fractional_score = null;
  this.small_integer_metadata = null;
  this.unsigned_small_int_metadata = null;
  this.bigger_unsigned_integer_metadata = null;
  this.data_points = null;
  if (args) {
    if (args.information !== undefined) {
      this.information = args.information;
    }
    if (args.fractional_score !== undefined) {
      this.fractional_score = args.fractional_score;
    }
    if (args.small_integer_metadata !== undefined) {
      this.small_integer_metadata = args.small_integer_metadata;
    }
    if (args.unsigned_small_int_metadata !== undefined) {
      this.unsigned_small_int_metadata = args.unsigned_small_int_metadata;
    }
    if (args.bigger_unsigned_integer_metadata !== undefined) {
      this.bigger_unsigned_integer_metadata = args.bigger_unsigned_integer_metadata;
    }
    if (args.data_points !== undefined) {
      this.data_points = args.data_points;
    }
  }
};
pocketdimension.example.foo.Method1Response.prototype = {};
pocketdimension.example.foo.Method1Response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.information = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.fractional_score = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.small_integer_metadata = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.unsigned_small_int_metadata = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.bigger_unsigned_integer_metadata = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.data_points = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Method1Response_InnerData();
          elem6.read(input);
          this.data_points.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pocketdimension.example.foo.Method1Response.prototype.write = function(output) {
  output.writeStructBegin('Method1Response');
  if (this.information) {
    output.writeFieldBegin('information', Thrift.Type.STRING, 1);
    output.writeString(this.information);
    output.writeFieldEnd();
  }
  if (this.fractional_score) {
    output.writeFieldBegin('fractional_score', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.fractional_score);
    output.writeFieldEnd();
  }
  if (this.small_integer_metadata) {
    output.writeFieldBegin('small_integer_metadata', Thrift.Type.I32, 3);
    output.writeI32(this.small_integer_metadata);
    output.writeFieldEnd();
  }
  if (this.unsigned_small_int_metadata) {
    output.writeFieldBegin('unsigned_small_int_metadata', Thrift.Type.I32, 4);
    output.writeI32(this.unsigned_small_int_metadata);
    output.writeFieldEnd();
  }
  if (this.bigger_unsigned_integer_metadata) {
    output.writeFieldBegin('bigger_unsigned_integer_metadata', Thrift.Type.I64, 5);
    output.writeI64(this.bigger_unsigned_integer_metadata);
    output.writeFieldEnd();
  }
  if (this.data_points) {
    output.writeFieldBegin('data_points', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.data_points.length);
    for (var iter7 in this.data_points)
    {
      if (this.data_points.hasOwnProperty(iter7))
      {
        iter7 = this.data_points[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

